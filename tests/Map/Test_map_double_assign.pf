! Test for use fArgParse use case that fails with ifort-19.  Issue is
! apparently related to copying of StringUnlimited maps at multiple
! levels.  In the use case a function is used to return a map, and the
! retun value is itself a function return at the level above.

module String_mod
  implicit none
  private

  public :: String
  type :: String
     character(:), allocatable :: string
  end type String

end module String_mod

module UnlimitedMap_mod
#include "types/key_deferredLengthString.inc"
#include "types/value_unlimitedPoly.inc"
#define _alt
#include "templates/map.inc"
end module UnlimitedMap_mod


module Test_map_double_assign
   use String_mod
   use funit
   use UnlimitedMap_mod
   
   @suite(name='Test_map_double_assign_suite')

  type :: ArgParser
     class(*), allocatable :: default
  end type ArgParser


contains

   subroutine get_defaults(this, option_values)
      type (Map), intent(out) :: option_values
      class (ArgParser), target, intent(inout) :: this

      class(*), pointer :: q

      this%default = 'TestRunner'
      q => this%default

      select type (q)
      type is (character(*))
         call option_values%insert('runner', String(q))
      end select

   end subroutine get_defaults

#ifdef __INTEL_COMPILER
   @test(ifdef=__INTEL_COMPILER)
   @disable
   subroutine test_unlimited
      type (Map) :: m
      type (ArgParser) :: p

      class(*), pointer :: opt

      call get_defaults(p, m)
      opt => m%at('runner')
      select type (opt)
      class is (String)
         @assertEqual('TestRunner', opt%string)
      class default
         @assertFalse(.true.,message='should not get here')
      end select
      
   end subroutine test_unlimited
#else
   @test(ifndef=__INTEL_COMPILER)
   @disable
   subroutine test_unlimited
      type (Map) :: m
      type (ArgParser) :: p

      class(*), pointer :: opt

      call get_defaults(p, m)
      opt => m%at('runner')
      select type (opt)
      class is (String)
         @assertEqual('TestRunner', opt%string)
      class default
         @assertFalse(.true.,message='should not get here')
      end select
      
   end subroutine test_unlimited
#endif

end module Test_map_double_assign
